{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody, LinearProgress } from \"@material-ui/core\";\nimport axios from 'axios';\nimport * as _ from 'lodash';\nimport numeral from 'numeral';\nconst query = `\nSELECT\n  Area,\n  CAST(COALESCE(TotalCases, 0) AS Integer) AS TotalCases,\n  Date\nFROM\n  cases\nWHERE\n  Country = 'Scotland'\n  AND Date = (\n    SELECT\n      MAX(Date)\n    FROM\n      cases\n  )\nORDER BY\n  TotalCases DESC\n`;\n\nfunction createBaseWithDB(db) {\n  return 'https://covid-19-uk-datasette-65tzkjlxkq-ew.a.run.app/' + db + '.json';\n}\n\nconst baseURL = createBaseWithDB('covid-19-uk') + '?sql=' + encodeURIComponent(query);\nexport default class TopAreasTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      data: [],\n      loading: true\n    });\n  }\n\n  componentDidMount() {\n    axios.get(baseURL).then(response => {\n      let _build_data = []; // hyrate array of JSON object with rows based on the columns\n\n      _.map(response.data.rows, function (r) {\n        _build_data.push(_.mapKeys(r, function (v, k) {\n          return response.data.columns[k];\n        }));\n      });\n\n      this.setState({\n        data: _build_data\n      });\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return __jsx(LinearProgress, null);\n    }\n\n    return __jsx(TableContainer, {\n      component: Paper\n    }, __jsx(Table, {\n      size: \"small\"\n    }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Area\"), __jsx(TableCell, null, \"Confirmed Cases\"), __jsx(TableCell, null, \"Last Updated\"))), __jsx(TableBody, null, this.state.data.map(row => __jsx(TableRow, {\n      key: row.Date + row.Area\n    }, __jsx(TableCell, null, row.Area), __jsx(TableCell, null, numeral(row.TotalCases).format('0,0')), __jsx(TableCell, null, row.Date))))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}