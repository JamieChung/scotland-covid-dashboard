{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { LinearProgress, Card, CardContent, CardHeader } from '@material-ui/core';\nimport axios from 'axios';\nimport * as _ from 'lodash';\nimport moment from 'moment';\nimport React from \"react\";\nimport { CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport * as colors from '../../utils/colors';\nvar query = \"\\nwith _confirmed AS (\\n    SELECT\\n      Date,\\n      Country,\\n      Value AS ConfirmedCases\\n    FROM\\n      indicators\\n    WHERE\\n      Indicator = 'ConfirmedCases'\\n  ),\\n  _tests AS (\\n    SELECT\\n      Date,\\n      Country,\\n      Value AS Tests\\n    FROM\\n      indicators\\n    WHERE\\n      Indicator = 'Tests'\\n  ),\\n  _deaths AS (\\n    SELECT\\n      Date,\\n      Country,\\n      Value AS Deaths\\n    FROM\\n      indicators\\n    WHERE\\n      Indicator = 'Deaths'\\n  ),\\n  collapsed AS (\\n    SELECT\\n      _confirmed.Date,\\n      _Confirmed.Country,\\n      COALESCE(ConfirmedCases, 0) AS ConfirmedCases,\\n      COALESCE(Tests, 0) AS Tests,\\n      COALESCE(Deaths, 0) AS Deaths\\n    FROM\\n      _confirmed\\n      LEFT JOIN _tests ON (\\n        _confirmed.Country = _tests.Country\\n        AND _confirmed.Date = _tests.Date\\n      )\\n      LEFT JOIN _deaths ON (\\n        _confirmed.Country = _deaths.Country\\n        AND _confirmed.Date = _deaths.Date\\n      )\\n  )\\n  SELECT\\n    *\\n  FROM\\n    collapsed\\n  WHERE\\n    Country IN ('Scotland')\\n  ORDER BY\\n    Date ASC\\n\";\n\nfunction formatDateLabel(label) {\n  // return new Date(label).getMonth () + '-' + new Date(label).getDay();\n  return moment(label).format('MMM-DD');\n}\n\nfunction createBaseWithDB(db) {\n  return 'https://covid-19-uk-datasette-65tzkjlxkq-ew.a.run.app/' + db + '.json';\n}\n\nvar baseURL = createBaseWithDB('covid-19-uk') + '?sql=' + encodeURIComponent(query);\n\nfunction singleCountryChart(title, data) {\n  return __jsx(Card, null, __jsx(CardHeader, {\n    subheader: title\n  }), __jsx(CardContent, null, __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: 500\n  }, __jsx(LineChart, null, __jsx(Line, {\n    dataKey: \"ConfirmedCases\",\n    data: data,\n    stroke: colors.COLOR_CONFIRMED_CASES_HEX\n  }), __jsx(Line, {\n    dataKey: \"Tests\",\n    data: data,\n    stroke: colors.COLOR_TESTS_HEX\n  }), __jsx(Line, {\n    dataKey: \"Deaths\",\n    data: data,\n    stroke: colors.COLOR_DEATHS_HEX\n  }), __jsx(Legend, null), __jsx(Tooltip, null), __jsx(CartesianGrid, {\n    strokeDasharray: \"5 5\"\n  }), __jsx(YAxis, {\n    label: {\n      value: 'Frequency',\n      angle: -90,\n      position: 'insideLeft'\n    }\n  }), __jsx(XAxis, {\n    dataKey: \"Date\",\n    allowDuplicatedCategory: false,\n    tickFormatter: formatDateLabel\n  })))));\n}\n\nvar CountryCharts = /*#__PURE__*/function (_React$Component) {\n  _inherits(CountryCharts, _React$Component);\n\n  var _super = _createSuper(CountryCharts);\n\n  function CountryCharts() {\n    var _this;\n\n    _classCallCheck(this, CountryCharts);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      data: [],\n      loading: true\n    });\n\n    return _this;\n  }\n\n  _createClass(CountryCharts, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get(baseURL).then(function (response) {\n        var _build_data = []; // hyrate array of JSON object with rows based on the columns\n\n        _.map(response.data.rows, function (r) {\n          _build_data.push(_.mapKeys(r, function (v, k) {\n            return response.data.columns[k];\n          }));\n        });\n\n        _this2.setState({\n          data: _.groupBy(_build_data, 'Country'),\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return __jsx(LinearProgress, null);\n      }\n\n      return __jsx(\"div\", null, singleCountryChart('Scotland - Confirmed Cases, Tests and Cases', this.state.data['Scotland']));\n    }\n  }]);\n\n  return CountryCharts;\n}(React.Component);\n\nexport { CountryCharts as default };","map":null,"metadata":{},"sourceType":"module"}