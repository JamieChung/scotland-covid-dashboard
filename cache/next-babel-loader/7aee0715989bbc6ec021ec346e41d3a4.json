{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport * as _ from 'lodash';\nimport React from 'react';\nimport axios from 'axios';\nimport { Table, TableHead, TableRow, TableCell, TableBody, Paper, TableContainer } from '@material-ui/core';\nimport numeral from 'numeral';\nlet query = `\nwith _confirmed AS (\n    SELECT\n      Date,\n      Country,\n      Value AS ConfirmedCases\n    FROM\n      indicators\n    WHERE\n      Indicator = 'ConfirmedCases'\n  ),\n  _tests AS (\n    SELECT\n      Date,\n      Country,\n      Value AS Tests\n    FROM\n      indicators\n    WHERE\n      Indicator = 'Tests'\n  ),\n  _deaths AS (\n    SELECT\n      Date,\n      Country,\n      Value AS Deaths\n    FROM\n      indicators\n    WHERE\n      Indicator = 'Deaths'\n  ),\n  collapsed AS (\n    SELECT\n      _confirmed.Date,\n      _Confirmed.Country,\n      COALESCE(ConfirmedCases, 0) AS ConfirmedCases,\n      COALESCE(Tests, 0) AS Tests,\n      COALESCE(Deaths, 0) AS Deaths\n    FROM\n      _confirmed\n      LEFT JOIN _tests ON (\n        _confirmed.Country = _tests.Country\n        AND _confirmed.Date = _tests.Date\n      )\n      LEFT JOIN _deaths ON (\n        _confirmed.Country = _deaths.Country\n        AND _confirmed.Date = _deaths.Date\n      )\n    WHERE\n      _confirmed.Date = (\n        SELECT\n          MAX(Date)\n        FROM\n          indicators\n      )\n  )\n  SELECT\n    *\n  FROM\n    collapsed\n  --WHERE\n    --Country NOT IN ('UK')\n  ORDER BY\n    ConfirmedCases DESC\n`;\n\nfunction createBaseWithDB(db) {\n  return 'https://covid-19-uk-datasette-65tzkjlxkq-ew.a.run.app/' + db + '.json';\n}\n\nconst baseURL = createBaseWithDB('covid-19-uk') + '?sql=' + encodeURIComponent(query);\n\nfunction mapCountryToEmojiFlag(country) {\n  let flag = '🇬🇧';\n\n  switch (country) {\n    case 'Scotland':\n      flag = '🏴󠁧󠁢󠁳󠁣󠁴󠁿';\n      break;\n\n    case 'Wales':\n      flag = '🏴󠁧󠁢󠁷󠁬󠁳󠁿';\n      break;\n\n    case 'England':\n      flag = '🏴󠁧󠁢󠁥󠁮󠁧󠁿';\n      break;\n  }\n\n  return flag ? flag : '🇬🇧';\n}\n\nexport default class TopCountriesTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      data: [],\n      loading: true\n    });\n  }\n\n  componentDidMount() {\n    axios.get(baseURL).then(response => {\n      let _build_data = []; // hyrate array of JSON object with rows based on the columns\n\n      _.map(response.data.rows, function (r) {\n        _build_data.push(_.mapKeys(r, function (v, k) {\n          return response.data.columns[k];\n        }));\n      });\n\n      this.setState({\n        data: _build_data\n      });\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return __jsx(LinearProgress, null);\n    }\n\n    return __jsx(TableContainer, {\n      component: Paper\n    }, __jsx(Table, {\n      size: \"small\"\n    }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Country\"), __jsx(TableCell, null, \"Confirmed Cases\"), __jsx(TableCell, null, \"Tests\"), __jsx(TableCell, null, \"Deaths\"), __jsx(TableCell, null, \"Last Updated\"))), __jsx(TableBody, null, this.state.data.map(row => __jsx(TableRow, {\n      key: row.Date + row.Country\n    }, __jsx(TableCell, null, mapCountryToEmojiFlag(row.Country), \" \", row.Country), __jsx(TableCell, null, numeral(row.ConfirmedCases).format('0,0')), __jsx(TableCell, null, numeral(row.Tests).format('0,0')), __jsx(TableCell, null, numeral(row.Deaths).format('0,0')), __jsx(TableCell, null, row.Date))))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}