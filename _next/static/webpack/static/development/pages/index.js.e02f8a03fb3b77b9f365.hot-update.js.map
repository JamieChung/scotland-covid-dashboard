{"version":3,"file":"static/webpack/static/development/pages/index.js.e02f8a03fb3b77b9f365.hot-update.js","sources":["webpack:///./pages/components/countryCharts.tsx"],"sourcesContent":["import { LinearProgress, Paper, Typography, Card, CardContent, CardHeader } from '@material-ui/core';\nimport axios from 'axios';\nimport * as _ from 'lodash';\nimport moment from 'moment';\nimport React from \"react\";\nimport { CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis, Brush } from 'recharts';\nimport * as colors from '../../utils/chartcolors';\n\nconst query = `\nwith _confirmed AS (\n    SELECT\n      Date,\n      Country,\n      Value AS ConfirmedCases\n    FROM\n      indicators\n    WHERE\n      Indicator = 'ConfirmedCases'\n  ),\n  _tests AS (\n    SELECT\n      Date,\n      Country,\n      Value AS Tests\n    FROM\n      indicators\n    WHERE\n      Indicator = 'Tests'\n  ),\n  _deaths AS (\n    SELECT\n      Date,\n      Country,\n      Value AS Deaths\n    FROM\n      indicators\n    WHERE\n      Indicator = 'Deaths'\n  ),\n  collapsed AS (\n    SELECT\n      _confirmed.Date,\n      _Confirmed.Country,\n      COALESCE(ConfirmedCases, 0) AS ConfirmedCases,\n      COALESCE(Tests, 0) AS Tests,\n      COALESCE(Deaths, 0) AS Deaths\n    FROM\n      _confirmed\n      LEFT JOIN _tests ON (\n        _confirmed.Country = _tests.Country\n        AND _confirmed.Date = _tests.Date\n      )\n      LEFT JOIN _deaths ON (\n        _confirmed.Country = _deaths.Country\n        AND _confirmed.Date = _deaths.Date\n      )\n  )\n  SELECT\n    *\n  FROM\n    collapsed\n  WHERE\n    Country IN ('Scotland')\n  ORDER BY\n    Date ASC\n`;\n\nfunction formatDateLabel(label: string): string {\n  // return new Date(label).getMonth () + '-' + new Date(label).getDay();\n  return moment(label).format('MMM-DD');\n}\n\nfunction createBaseWithDB(db: string): string {\n  return 'https://covid-19-uk-datasette-65tzkjlxkq-ew.a.run.app/' + db + '.json';\n}\n\nconst baseURL = createBaseWithDB('covid-19-uk') + '?sql=' + encodeURIComponent(query);\n\nfunction singleCountryChart(title, data) {\n  return (\n    <Card>\n      <CardHeader subheader={title} />\n      <CardContent>\n        <ResponsiveContainer width='100%' height={500}>\n          <LineChart>\n            <Line dataKey=\"ConfirmedCases\" data={data} stroke={colors.COLOR_CONFIRMED_CASES_HEX} />\n            <Line dataKey=\"Tests\" data={data} stroke={colors.COLOR_TESTS_HEX} />\n            <Line dataKey=\"Deaths\" data={data} stroke={colors.COLOR_DEATHS_HEX} />\n            <Legend />\n            <Tooltip />\n            <CartesianGrid strokeDasharray=\"5 5\" />\n            <YAxis />\n            <Brush dataKey=\"Date\" height={30} stroke=\"#8884d8\" />\n            <XAxis\n              dataKey=\"Date\"\n              allowDuplicatedCategory={false}\n              tickFormatter={formatDateLabel}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default class CountryCharts extends React.Component {\n\n  state = {\n    data: [],\n    loading: true\n  }\n\n  componentDidMount() {\n\n    axios.get(baseURL)\n      .then(response => {\n\n        let _build_data = [];\n        // hyrate array of JSON object with rows based on the columns\n        _.map(response.data.rows, function (r) {\n          _build_data.push(_.mapKeys(r, function (v, k) {\n            return response.data.columns[k];\n          }))\n        });\n\n        this.setState({\n          data: _.groupBy(_build_data, 'Country'),\n          loading: false\n        });\n      })\n  }\n\n  render() {\n\n    if (this.state.loading) {\n      return <LinearProgress />\n    }\n\n    return (\n      <div>\n        {singleCountryChart('Scotland Confirmed Cases, Tests and Deaths', this.state.data['Scotland'])}\n      </div>\n    )\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA0DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAFA;AACA;;;;;;AAIA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAtCA;AACA;;;;;A","sourceRoot":""}